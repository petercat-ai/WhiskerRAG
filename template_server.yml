AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Whisker RAG Server

Globals:
  Function:
    Timeout: 300

Parameters:
  s3TempBucketName:
    Type: String
    Description: Environment marker for S3_TEMP_BUCKET_NAME
    Default: "1"

  supabaseServiceKey:
    Type: String
    Description: Environment marker for SUPABASE_SERVICE_KEY
    Default: "1"

  supabaseUrl:
    Type: String
    Description: Environment marker for SUPABASE_URL
    Default: "1"

  webUrl:
    Type: String
    Description: Environment marker for WEB_URL
    Default: "1"

  knowledgeTableName:
    Type: String
    Description: Environment marker for KNOWLEDGE_TABLE_NAME
    Default: "knowledge"

  chunkTableName:
    Type: String
    Description: Environment marker for CHUNK_TABLE_NAME
    Default: "chunk"

  taskTableName:
    Type: String
    Description: Environment marker for TASK_TABLE_NAME
    Default: "task"

  actionTableName:
    Type: String
    Description: Environment marker for ACTION_TABLE_NAME
    Default: "action"

  tenantTableName:
    Type: String
    Description: Environment marker for TENANT_TABLE_NAME
    Default: "tenant"

  openAIKey:
    Type: String
    Description: Environment marker for OPENAI_API_KEY
    Default: "1"

  dbEngineClassName:
    Type: String
    Description: Environment marker for DB_ENGINE_CLASSNAME
    Default: "1"

  taskEngineClassName:
    Type: String
    Description: Environment marker for TASK_ENGINE_CLASSNAME
    Default: "1"

  whiskerEnv:
    Type: String
    Description: Environment marker for WHISKER_ENV
    Default: "prod"

Resources:
  WhiskerServer:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      MemorySize: 512
      Environment:
        Variables:
          WEB_URL: !Ref webUrl
          AWS_LWA_INVOKE_MODE: RESPONSE_STREAM
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
          S3_TEMP_BUCKET_NAME: !Ref s3TempBucketName
          SUPABASE_SERVICE_KEY: !Ref supabaseServiceKey
          SUPABASE_URL: !Ref supabaseUrl
          KNOWLEDGE_TABLE_NAME: !Ref knowledgeTableName
          CHUNK_TABLE_NAME: !Ref chunkTableName
          TASK_TABLE_NAME: !Ref taskTableName
          ACTION_TABLE_NAME: !Ref actionTableName
          TENANT_TABLE_NAME: !Ref tenantTableName
          OPENAI_API_KEY: !Ref openAIKey
          DB_ENGINE_CLASSNAME: !Ref dbEngineClassName
          TASK_ENGINE_CLASSNAME: !Ref taskEngineClassName
      FunctionUrlConfig:
        AuthType: NONE
        InvokeMode: RESPONSE_STREAM
      Policies:
      - Statement:
        - Sid: BedrockInvokePolicy
          Effect: Allow
          Action:
            - bedrock:InvokeModelWithResponseStream
          Resource: '*'
        - Sid: AllObjectActions
          Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            - !Sub 'arn:aws:s3:::${s3TempBucketName}/*'
      Tracing: Active
    Metadata:
      DockerContext: server
      Dockerfile: ../docker/Dockerfile.aws.server
      DockerTag: v1

  ServerApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-api
      EndpointConfiguration:
        Types:
          - REGIONAL

  ServerApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ServerApiProxy
    Properties:
      RestApiId: !Ref ServerApi

  ServerApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref ServerApi
      DeploymentId: !Ref ServerApiDeployment
      StageName: !Ref whiskerEnv

  ServerApiProxy:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ServerApi
      ParentId: !GetAtt ServerApi.RootResourceId
      PathPart: '{proxy+}'

  ServerApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ServerApi
      ResourceId: !Ref ServerApiProxy
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WhiskerServer.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
      RequestParameters:
        method.request.header.Authorization: false
        method.request.path.proxy: true

  ServerApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WhiskerServer
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ServerApi}/*/*

Outputs:
  WhiskerServerUrl:
    Description: "Function URL for FastAPI function"
    Value: !GetAtt WhiskerServerUrl.FunctionUrl
  WhiskerServer:
    Description: "FastAPI Lambda Function ARN"
    Value: !GetAtt WhiskerServer.Arn
  ServerApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub https://${ServerApi}.execute-api.${AWS::Region}.amazonaws.com/${whiskerEnv}/
