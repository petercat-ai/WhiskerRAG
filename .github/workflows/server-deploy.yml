name: Deploy whisker server to AWS

on:
  workflow_run:
    workflows: ["server-ci"]
    types: ["completed"]
    branches: ["test","main","preview","test/*","preview/*"]
  push:
    branches: ["test","main","preview","test/*","preview/*"]
    paths:
      - 'server/**'
      - '.github/workflows/server-deploy.yml'
      - '.aws/server_samconfig.toml'
      - 'template_server.yml'
      - 'docker/Dockerfile.aws.server'
  pull_request:
    branches: ["test","main","preview","test/*","preview/*"]
    paths:
      - 'server/**'
      - '.github/workflows/server-deploy.yml'
      - '.aws/server_samconfig.toml'
      - 'template_server.yml'
      - 'docker/Dockerfile.aws.server'

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
  actions: write

jobs:
  server-deploy:
    runs-on: ubuntu-latest

    environment: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Preview' }}
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Preview' }}
    strategy:
      fail-fast: true
    outputs:
      api_url: ${{ steps.get_api_url.outputs.api_url }}


    steps:
      - name: Print specific variables
        run: |
          echo "Current github.ref : ${{ github.ref }}"
          echo "Deploying to ${{ env.ENVIRONMENT }}"
          echo "Current AWS_REGION: ${{ vars.AWS_REGION }}"
          echo "Current WHISKER_ENV: ${{ vars.WHISKER_ENV }}"
          echo "GitHub actor: ${{ github.actor }}"

      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::654654285942:role/Github-OIDC
          audience: sts.amazonaws.com
          aws-region: ${{ vars.AWS_REGION }}

      # Build inside Docker containers
      - run: sam build --use-container --template template_server.yml --config-file .aws/server_samconfig.toml

      # Prevent prompts and failure when the stack is unchanged
      - run: |
          sam deploy \
            --no-confirm-changeset \
            --config-env ${{ vars.WHISKER_ENV}} \
            --no-fail-on-empty-changeset \
            --config-file .aws/server_samconfig.toml \
            --parameter-overrides \
              ParameterKey=supabaseServiceKey,ParameterValue=${{ secrets.SUPABASE_SERVICE_KEY }} \
              ParameterKey=supabaseUrl,ParameterValue=${{ secrets.SUPABASE_URL }} \
              ParameterKey=s3TempBucketName,ParameterValue=${{ vars.S3_TEMP_BUCKET_NAME }} \
              ParameterKey=webUrl,ParameterValue=${{ vars.WEB_URL }} \
              ParameterKey=knowledgeTableName,ParameterValue=${{ vars.KNOWLEDGE_TABLE_NAME }} \
              ParameterKey=chunkTableName,ParameterValue=${{ vars.CHUNK_TABLE_NAME }} \
              ParameterKey=taskTableName,ParameterValue=${{ vars.TASK_TABLE_NAME }} \
              ParameterKey=actionTableName,ParameterValue=${{ vars.ACTION_TABLE_NAME }} \
              ParameterKey=tenantTableName,ParameterValue=${{ vars.TENANT_TABLE_NAME }} \
              ParameterKey=openAIKey,ParameterValue=${{ secrets.OPENAI_API_KEY }} \
              ParameterKey=dbEngineClassName,ParameterValue=${{ vars.DB_ENGINE_CLASSNAME }} \
              ParameterKey=taskEngineClassName,ParameterValue=${{ vars.TASK_ENGINE_CLASSNAME }} \
              ParameterKey=whiskerEnv,ParameterValue=${{ vars.WHISKER_ENV }} \
              ParameterKey=sqsQueueUrl,ParameterValue=${{ vars.SQS_QUEUE_URL }} \

      - name: Get API URL
        id: get_api_url
        run: |
          # 从 SAM 输出或环境变量中获取 API URL
          API_URL=$(aws cloudformation describe-stacks --stack-name your-stack-name --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' --output text)
          echo "api_url=${API_URL}" >> $GITHUB_OUTPUT

  generate-client:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        
        - name: Setup Node.js
          uses: actions/setup-node@v2
          with:
            node-version: '16'
            registry-url: 'https://registry.npmjs.org'

        - name: Install swagger-typescript-api
          run: npm install -g swagger-typescript-api

        - name: Generate Client
          run: |
            swagger-typescript-api -p http://your-api-url/openapi.json -o ./client \
              --name api.ts \
              --type-prefix I \
              --module-name-index 1

        - name: Prepare Package
          run: |
            cd client
            npm init -y
            npm version ${{ github.ref_name }}
            
        - name: Publish to NPM
          run: npm publish
          env:
            NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}